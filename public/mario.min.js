var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.defineProperty = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
  a != Array.prototype && a != Object.prototype && (a[b] = c.value);
};
$jscomp.getGlobal = function(a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.SYMBOL_PREFIX = "jscomp_symbol_";
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {
  };
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.symbolCounter_ = 0;
$jscomp.Symbol = function(a) {
  return $jscomp.SYMBOL_PREFIX + (a || "") + $jscomp.symbolCounter_++;
};
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var a = $jscomp.global.Symbol.iterator;
  a || (a = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator"));
  "function" != typeof Array.prototype[a] && $jscomp.defineProperty(Array.prototype, a, {configurable:!0, writable:!0, value:function() {
    return $jscomp.arrayIterator(this);
  }});
  $jscomp.initSymbolIterator = function() {
  };
};
$jscomp.arrayIterator = function(a) {
  var b = 0;
  return $jscomp.iteratorPrototype(function() {
    return b < a.length ? {done:!1, value:a[b++]} : {done:!0};
  });
};
$jscomp.iteratorPrototype = function(a) {
  $jscomp.initSymbolIterator();
  a = {next:a};
  a[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return a;
};
$jscomp.makeIterator = function(a) {
  $jscomp.initSymbolIterator();
  var b = a[Symbol.iterator];
  return b ? b.call(a) : $jscomp.arrayIterator(a);
};
$jscomp.owns = function(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
};
$jscomp.polyfill = function(a, b, c, d) {
  if (b) {
    c = $jscomp.global;
    a = a.split(".");
    for (d = 0; d < a.length - 1; d++) {
      var e = a[d];
      e in c || (c[e] = {});
      c = c[e];
    }
    a = a[a.length - 1];
    d = c[a];
    b = b(d);
    b != d && null != b && $jscomp.defineProperty(c, a, {configurable:!0, writable:!0, value:b});
  }
};
$jscomp.polyfill("WeakMap", function(a) {
  function b(a) {
    $jscomp.owns(a, d) || $jscomp.defineProperty(a, d, {value:{}});
  }
  function c(a) {
    var c = Object[a];
    c && (Object[a] = function(a) {
      b(a);
      return c(a);
    });
  }
  if (function() {
    if (!a || !Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({}), c = Object.seal({}), d = new a([[b, 2], [c, 3]]);
      if (2 != d.get(b) || 3 != d.get(c)) {
        return !1;
      }
      d.delete(b);
      d.set(c, 4);
      return !d.has(b) && 4 == d.get(c);
    } catch (k) {
      return !1;
    }
  }()) {
    return a;
  }
  var d = "$jscomp_hidden_" + Math.random().toString().substring(2);
  c("freeze");
  c("preventExtensions");
  c("seal");
  var e = 0, f = function(a) {
    this.id_ = (e += Math.random() + 1).toString();
    if (a) {
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  f.prototype.set = function(a, c) {
    b(a);
    if (!$jscomp.owns(a, d)) {
      throw Error("WeakMap key fail: " + a);
    }
    a[d][this.id_] = c;
    return this;
  };
  f.prototype.get = function(a) {
    return $jscomp.owns(a, d) ? a[d][this.id_] : void 0;
  };
  f.prototype.has = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_);
  };
  f.prototype.delete = function(a) {
    return $jscomp.owns(a, d) && $jscomp.owns(a[d], this.id_) ? delete a[d][this.id_] : !1;
  };
  return f;
}, "es6-impl", "es3");
$jscomp.MapEntry = function() {
};
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.polyfill("Map", function(a) {
  if (!$jscomp.ASSUME_NO_NATIVE_MAP && function() {
    if (!a || !a.prototype.entries || "function" != typeof Object.seal) {
      return !1;
    }
    try {
      var b = Object.seal({x:4}), c = new a($jscomp.makeIterator([[b, "s"]]));
      if ("s" != c.get(b) || 1 != c.size || c.get({x:4}) || c.set({x:4}, "t") != c || 2 != c.size) {
        return !1;
      }
      var d = c.entries(), e = d.next();
      if (e.done || e.value[0] != b || "s" != e.value[1]) {
        return !1;
      }
      e = d.next();
      return e.done || 4 != e.value[0].x || "t" != e.value[1] || !d.next().done ? !1 : !0;
    } catch (n) {
      return !1;
    }
  }()) {
    return a;
  }
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  var b = new WeakMap, c = function(a) {
    this.data_ = {};
    this.head_ = f();
    this.size = 0;
    if (a) {
      a = $jscomp.makeIterator(a);
      for (var b; !(b = a.next()).done;) {
        b = b.value, this.set(b[0], b[1]);
      }
    }
  };
  c.prototype.set = function(a, b) {
    var c = d(this, a);
    c.list || (c.list = this.data_[c.id] = []);
    c.entry ? c.entry.value = b : (c.entry = {next:this.head_, previous:this.head_.previous, head:this.head_, key:a, value:b}, c.list.push(c.entry), this.head_.previous.next = c.entry, this.head_.previous = c.entry, this.size++);
    return this;
  };
  c.prototype.delete = function(a) {
    a = d(this, a);
    return a.entry && a.list ? (a.list.splice(a.index, 1), a.list.length || delete this.data_[a.id], a.entry.previous.next = a.entry.next, a.entry.next.previous = a.entry.previous, a.entry.head = null, this.size--, !0) : !1;
  };
  c.prototype.clear = function() {
    this.data_ = {};
    this.head_ = this.head_.previous = f();
    this.size = 0;
  };
  c.prototype.has = function(a) {
    return !!d(this, a).entry;
  };
  c.prototype.get = function(a) {
    return (a = d(this, a).entry) && a.value;
  };
  c.prototype.entries = function() {
    return e(this, function(a) {
      return [a.key, a.value];
    });
  };
  c.prototype.keys = function() {
    return e(this, function(a) {
      return a.key;
    });
  };
  c.prototype.values = function() {
    return e(this, function(a) {
      return a.value;
    });
  };
  c.prototype.forEach = function(a, b) {
    for (var c = this.entries(), d; !(d = c.next()).done;) {
      d = d.value, a.call(b, d[1], d[0], this);
    }
  };
  c.prototype[Symbol.iterator] = c.prototype.entries;
  var d = function(a, c) {
    var d = c && typeof c;
    "object" == d || "function" == d ? b.has(c) ? d = b.get(c) : (d = "" + ++g, b.set(c, d)) : d = "p_" + c;
    var e = a.data_[d];
    if (e && $jscomp.owns(a.data_, d)) {
      for (a = 0; a < e.length; a++) {
        var f = e[a];
        if (c !== c && f.key !== f.key || c === f.key) {
          return {id:d, list:e, index:a, entry:f};
        }
      }
    }
    return {id:d, list:e, index:-1, entry:void 0};
  }, e = function(a, b) {
    var c = a.head_;
    return $jscomp.iteratorPrototype(function() {
      if (c) {
        for (; c.head != a.head_;) {
          c = c.previous;
        }
        for (; c.next != c.head;) {
          return c = c.next, {done:!1, value:b(c)};
        }
        c = null;
      }
      return {done:!0, value:void 0};
    });
  }, f = function() {
    var a = {};
    return a.previous = a.next = a.head = a;
  }, g = 0;
  return c;
}, "es6-impl", "es3");
$jscomp.polyfill("Array.from", function(a) {
  return a ? a : function(a, c, d) {
    $jscomp.initSymbolIterator();
    c = null != c ? c : function(a) {
      return a;
    };
    var b = [], f = a[Symbol.iterator];
    if ("function" == typeof f) {
      for (a = f.call(a); !(f = a.next()).done;) {
        b.push(c.call(d, f.value));
      }
    } else {
      for (var f = a.length, g = 0; g < f; g++) {
        b.push(c.call(d, a[g]));
      }
    }
    return b;
  };
}, "es6-impl", "es3");
$jscomp.polyfill("Array.prototype.fill", function(a) {
  return a ? a : function(a, c, d) {
    var b = this.length || 0;
    0 > c && (c = Math.max(0, b + c));
    if (null == d || d > b) {
      d = b;
    }
    d = Number(d);
    0 > d && (d = Math.max(0, b + d));
    for (c = Number(c || 0); c < d; c++) {
      this[c] = a;
    }
    return this;
  };
}, "es6-impl", "es3");
var types = new Map;
function setType(a, b) {
  types.set(a, b);
}
$jscomp.initSymbol();
var _Symbol = {reflection:Symbol("reflection")}, NonDeclaredType = function(a, b, c) {
  this.kind = a;
  this.definition = b;
  this.generics = c;
};
NonDeclaredType.prototype.Equals = function(a) {
  return this.kind === a.kind && this.definition === a.definition ? "object" === typeof this.generics ? equalsRecords(this.generics, a.generics) : this.generics === a.generics : !1;
};
var Any = new NonDeclaredType("Any"), Unit = new NonDeclaredType("Unit");
function Tuple(a) {
  return new NonDeclaredType("Tuple", null, a);
}
function Interface(a) {
  return new NonDeclaredType("Interface", a);
}
function hasInterface(a, b) {
  return "System.Collections.Generic.IEnumerable" === b ? ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), "function" === typeof a[Symbol.iterator]) : "function" === typeof a[_Symbol.reflection] ? (a = a[_Symbol.reflection]().interfaces, Array.isArray(a) && -1 < a.indexOf(b)) : !1;
}
function getPropertyNames(a) {
  if (null == a) {
    return [];
  }
  a = "function" === typeof a[_Symbol.reflection] ? a[_Symbol.reflection]().properties || [] : a;
  return Object.getOwnPropertyNames(a);
}
function toString(a, b) {
  b = void 0 === b ? !1 : b;
  if (null == a || "number" === typeof a) {
    return String(a);
  }
  if ("string" === typeof a) {
    return b ? JSON.stringify(a) : a;
  }
  if ("function" == typeof a.ToString) {
    return a.ToString();
  }
  if (hasInterface(a, "FSharpUnion")) {
    switch(b = a[_Symbol.reflection]().cases[a.tag], b.length) {
      case 1:
        return b[0];
      case 2:
        return b[0] + " (" + toString(a.data, !0) + ")";
      default:
        return b[0] + " (" + a.data.map(function(a) {
          return toString(a, !0);
        }).join(",") + ")";
    }
  }
  try {
    return JSON.stringify(a, function(a, b) {
      $jscomp.initSymbol();
      $jscomp.initSymbolIterator();
      return !b || !b[Symbol.iterator] || Array.isArray(b) || null === b || "object" !== typeof b || b instanceof Number || b instanceof String || b instanceof Boolean ? b && "function" === typeof b.ToString ? toString(b) : b : Array.from(b);
    });
  } catch (c) {
    return "{" + Object.getOwnPropertyNames(a).map(function(b) {
      return b + ": " + String(a[b]);
    }).join(", ") + "}";
  }
}
function hash(a) {
  if (null != a && "function" == typeof a.GetHashCode) {
    return a.GetHashCode();
  }
  a = JSON.stringify(a);
  for (var b = 5381, c = 0, d = a.length; c < d;) {
    b = 33 * b ^ a.charCodeAt(c++);
  }
  return b;
}
function equals(a, b) {
  if (a === b) {
    return !0;
  }
  if (null == a) {
    return null == b;
  }
  if (null == b || Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {
    return !1;
  }
  if ("function" === typeof a.Equals) {
    return a.Equals(b);
  }
  if (Array.isArray(a)) {
    if (a.length != b.length) {
      return !1;
    }
    for (var c = 0; c < a.length; c++) {
      if (!equals(a[c], b[c])) {
        return !1;
      }
    }
    return !0;
  }
  if (ArrayBuffer.isView(a)) {
    if (a.byteLength !== b.byteLength) {
      return !1;
    }
    c = new DataView(a.buffer);
    b = new DataView(b.buffer);
    for (var d = 0; d < a.byteLength; d++) {
      if (c.getUint8(d) !== b.getUint8(d)) {
        return !1;
      }
    }
    return !0;
  }
  return a instanceof Date ? a.getTime() === b.getTime() : !1;
}
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  if (null == a) {
    return null == b ? 0 : -1;
  }
  if (null == b) {
    return 1;
  }
  if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {
    return -1;
  }
  if ("function" === typeof a.CompareTo) {
    return a.CompareTo(b);
  }
  if (Array.isArray(a)) {
    if (a.length != b.length) {
      return a.length < b.length ? -1 : 1;
    }
    for (var c = 0, d; c < a.length; c++) {
      if (0 !== (d = compare(a[c], b[c]))) {
        return d;
      }
    }
    return 0;
  }
  if (ArrayBuffer.isView(a)) {
    if (a.byteLength != b.byteLength) {
      return a.byteLength < b.byteLength ? -1 : 1;
    }
    c = new DataView(a.buffer);
    b = new DataView(b.buffer);
    d = 0;
    for (var e, f; d < a.byteLength; d++) {
      e = c.getUint8(d);
      f = b.getUint8(d);
      if (e < f) {
        return -1;
      }
      if (e > f) {
        return 1;
      }
    }
    return 0;
  }
  return a instanceof Date ? (a = a.getTime(), b = b.getTime(), a === b ? 0 : a < b ? -1 : 1) : "object" === typeof a ? (c = hash(a), d = hash(b), c === d ? equals(a, b) ? 0 : -1 : c < d ? -1 : 1) : a < b ? -1 : 1;
}
function equalsRecords(a, b) {
  if (a !== b) {
    for (var c = getPropertyNames(a), d = 0; d < c.length; d++) {
      if (!equals(a[c[d]], b[c[d]])) {
        return !1;
      }
    }
  }
  return !0;
}
function compareRecords(a, b) {
  if (a !== b) {
    for (var c = getPropertyNames(a), d = 0; d < c.length; d++) {
      var e = compare(a[c[d]], b[c[d]]);
      if (0 !== e) {
        return e;
      }
    }
  }
  return 0;
}
function compareUnions(a, b) {
  if (a === b) {
    return 0;
  }
  var c = a.tag < b.tag ? -1 : a.tag > b.tag ? 1 : 0;
  return 0 !== c ? c : compare(a.data, b.data);
}
var canvas = document.getElementsByTagName("canvas")[0], context = canvas.getContext("2d"), sprite_params = function(a, b, c, d, e, f, g, h) {
  this.max_frames = a | 0;
  this.max_ticks = b | 0;
  this.img_src = c;
  this.frame_size = d;
  this.src_offset = e;
  this.bbox_offset = f;
  this.bbox_size = g;
  this.loop = h;
};
sprite_params.prototype[_Symbol.reflection] = function() {
  return {type:"Sprite.sprite_params", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{max_frames:"number", max_ticks:"number", img_src:"string", frame_size:Tuple(["number", "number"]), src_offset:Tuple(["number", "number"]), bbox_offset:Tuple(["number", "number"]), bbox_size:Tuple(["number", "number"]), loop:"boolean"}};
};
sprite_params.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
sprite_params.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Sprite.sprite_params", sprite_params);
var sprite = function(a, b, c, d, e) {
  this.param = a;
  this.context = b;
  this.frame = c;
  this.ticks = d;
  this.img = e;
};
sprite.prototype[_Symbol.reflection] = function() {
  return {type:"Sprite.sprite", interfaces:["FSharpRecord", "System.IEquatable"], properties:{param:sprite_params, context:Interface("Fable.Import.Browser.CanvasRenderingContext2D"), frame:Any, ticks:Any, img:Interface("Fable.Import.Browser.HTMLImageElement")}};
};
sprite.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
setType("Sprite.sprite", sprite);
function setup_sprite(a, b, c, d, e, f, g, h, m, k) {
  d = [g, h];
  return new sprite_params(e, f, "./sprites/" + a, d, [m, k], [b, c], d, !0);
}
function setup_sprite2(a, b, c, d, e, f, g) {
  d = [d, e];
  f = [f, g];
  g = [0, 0];
  return setup_sprite(a, g[0], g[1], d, b, c, d[0], d[1], f[0], f[1]);
}
function make_small_player(a, b) {
  return 1 === b.tag ? 1 === a.tag ? setup_sprite("mario-small.png", 2, 1, [13, 15], 2, 10, 16, 16, 16, 48) : 2 === a.tag ? setup_sprite("mario-small.png", 2, 1, [12, 15], 3, 5, 16, 16, 16, 32) : 3 === a.tag ? setup_sprite("mario-small.png", 1, 5, [14, 10], 1, 0, 16, 16, 0, 64) : setup_sprite("mario-small.png", 1, 1, [11, 15], 1, 0, 16, 16, 0, 32) : 1 === a.tag ? setup_sprite("mario-small.png", 2, 1, [13, 15], 2, 10, 16, 16, 16, 16) : 2 === a.tag ? setup_sprite("mario-small.png", 2, 1, [12, 15], 
  3, 5, 16, 16, 16, 0) : 3 === a.tag ? setup_sprite("mario-small.png", 1, 5, [14, 10], 1, 0, 16, 16, 0, 64) : setup_sprite("mario-small.png", 3, 1, [11, 15], 1, 0, 16, 16, 0, 0);
}
function make_big_player(a, b) {
  return 1 === b.tag ? 1 === a.tag ? setup_sprite("mario-big.png", 2, 1, [12, 25], 1, 0, 16, 26, 48, 70) : 2 === a.tag ? setup_sprite("mario-big.png", 2, 1, [13, 25], 4, 10, 16, 27, 0, 101) : 3 === a.tag ? setup_sprite("mario-big.png", 2, 10, [13, 17], 1, 0, 16, 27, 32, 69) : setup_sprite("mario-big.png", 1, 1, [13, 25], 1, 0, 16, 26, 16, 69) : 1 === a.tag ? setup_sprite("mario-big.png", 2, 1, [12, 25], 1, 0, 16, 26, 48, 6) : 2 === a.tag ? setup_sprite("mario-big.png", 2, 1, [13, 25], 4, 10, 16, 
  27, 0, 37) : 3 === a.tag ? setup_sprite("mario-big.png", 2, 10, [13, 17], 1, 0, 16, 27, 32, 5) : setup_sprite("mario-big.png", 2, 1, [13, 25], 1, 0, 16, 27, 16, 5);
}
function make_enemy(a, b) {
  a = [a, b];
  return 1 === a[0].tag ? 1 === a[1].tag ? setup_sprite("enemies.png", 1, 10, [11, 16], 2, 10, 16, 27, 32, 69) : setup_sprite("enemies.png", 4, 10, [11, 16], 2, 10, 16, 27, 0, 69) : 2 === a[0].tag ? 1 === a[1].tag ? setup_sprite("enemies.png", 1, 10, [11, 16], 2, 10, 16, 27, 32, 5) : setup_sprite("enemies.png", 4, 10, [11, 16], 2, 10, 16, 27, 0, 5) : 3 === a[0].tag ? setup_sprite("enemies.png", 2, 2, [12, 13], 4, 10, 16, 16, 0, 96) : 4 === a[0].tag ? setup_sprite("enemies.png", 2, 2, [12, 13], 4, 
  10, 16, 16, 0, 32) : setup_sprite("enemies.png", 1, 1, [14, 14], 2, 10, 16, 16, 0, 128);
}
function make_item(a) {
  return 1 === a.tag ? setup_sprite2("items.png", 1, 0, 16, 16, 0, 188) : 0 === a.tag ? setup_sprite("items.png", 2, 0, [12, 16], 1, 0, 16, 16, 0, 0) : 2 === a.tag ? setup_sprite2("items.png", 1, 0, 16, 16, 16, 48) : setup_sprite("items.png", 3, 0, [12, 16], 3, 15, 16, 16, 0, 80);
}
function make_block(a) {
  return 0 === a.tag ? setup_sprite2("blocks.png", 4, 15, 16, 16, 0, 16) : 1 === a.tag ? setup_sprite2("blocks.png", 1, 0, 16, 16, 0, 32) : 3 === a.tag ? setup_sprite2("blocks.png", 1, 0, 16, 16, 0, 48) : 4 === a.tag ? setup_sprite2("blocks.png", 1, 0, 16, 16, 0, 64) : 5 === a.tag ? setup_sprite2("panel.png", 3, 15, 26, 26, 0, 0) : 6 === a.tag ? setup_sprite2("ground.png", 1, 0, 16, 16, 0, 32) : setup_sprite2("blocks.png", 5, 10, 16, 16, 0, 0);
}
function make_particle2(a) {
  return 1 === a.tag ? setup_sprite2("chunks.png", 1, 0, 8, 8, 0, 0) : 2 === a.tag ? setup_sprite2("chunks.png", 1, 0, 8, 8, 8, 0) : 3 === a.tag ? setup_sprite2("score.png", 1, 0, 12, 8, 0, 0) : 4 === a.tag ? setup_sprite2("score.png", 1, 0, 12, 9, 0, 9) : 5 === a.tag ? setup_sprite2("score.png", 1, 0, 12, 9, 0, 18) : 6 === a.tag ? setup_sprite2("score.png", 1, 0, 12, 9, 0, 27) : 7 === a.tag ? setup_sprite2("score.png", 1, 0, 14, 9, 13, 0) : 8 === a.tag ? setup_sprite2("score.png", 1, 0, 14, 9, 13, 
  9) : 9 === a.tag ? setup_sprite2("score.png", 1, 0, 14, 9, 13, 18) : 10 === a.tag ? setup_sprite2("score.png", 1, 0, 14, 9, 13, 27) : setup_sprite2("enemies.png", 1, 0, 16, 16, 0, 144);
}
function make_player(a, b, c) {
  b = [b, c];
  return 1 === a.tag ? make_small_player(b[0], b[1]) : make_big_player(b[0], b[1]);
}
function make_type(a, b) {
  return 1 === a.tag ? make_enemy(a.data, b) : 2 === a.tag ? make_item(a.data) : 3 === a.tag ? make_block(a.data) : make_player(a.data[0], a.data[1], b);
}
function make_from_params(a, b) {
  var c = document.createElement("img");
  c.src = a.img_src;
  return new sprite(a, b, {contents:0}, {contents:0}, c);
}
function make(a, b, c) {
  a = make_type(a, b);
  return make_from_params(a, c);
}
function make_bgd(a) {
  var b = setup_sprite2("bgd-1.png", 1, 0, 512, 256, 0, 0);
  return make_from_params(b, a);
}
function make_particle(a, b) {
  a = make_particle2(a);
  return make_from_params(a, b);
}
function update_animation(a) {
  var b = a.ticks.contents | 0;
  b >= a.param.max_ticks ? (a.ticks.contents = 0, a.param.loop && (a.frame.contents = (a.frame.contents + 1) % a.param.max_frames | 0)) : a.ticks.contents = b + 1 | 0;
}
function transform_enemy(a, b, c) {
  a = make_enemy(a, c);
  c = document.createElement("img");
  c.src = a.img_src;
  b.param = a;
  b.img = c;
}
var dir_1d = function(a, b) {
  this.tag = a;
  this.data = b;
};
dir_1d.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.dir_1d", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["Left"], ["Right"]]};
};
dir_1d.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
dir_1d.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.dir_1d", dir_1d);
var dir_2d = function(a, b) {
  this.tag = a;
  this.data = b;
};
dir_2d.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.dir_2d", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["North"], ["South"], ["East"], ["West"]]};
};
dir_2d.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
dir_2d.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.dir_2d", dir_2d);
function eq_dir_1d(a, b) {
  return 1 === a.tag ? b.Equals(new dir_1d(1)) : b.Equals(new dir_1d(0));
}
var xy = function(a, b) {
  this.x = a;
  this.y = b;
};
xy.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.xy", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{x:"number", y:"number"}};
};
xy.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
xy.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Actors.xy", xy);
var controls = function(a, b) {
  this.tag = a;
  this.data = b;
};
controls.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.controls", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["CLeft"], ["CRight"], ["CUp"], ["CDown"]]};
};
controls.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
controls.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.controls", controls);
var pl_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
pl_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.pl_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["BigM"], ["SmallM"]]};
};
pl_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
pl_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.pl_typ", pl_typ);
var item_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
item_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.item_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["Mushroom"], ["FireFlower"], ["Star"], ["Coin"]]};
};
item_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
item_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.item_typ", item_typ);
var enemy_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
enemy_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.enemy_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["Goomba"], ["GKoopa"], ["RKoopa"], ["GKoopaShell"], ["RKoopaShell"]]};
};
enemy_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
enemy_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.enemy_typ", enemy_typ);
var block_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
block_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.block_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["QBlock", item_typ], ["QBlockUsed"], ["Brick"], ["UnBBlock"], ["Cloud"], ["Panel"], ["Ground"]]};
};
block_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
block_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.block_typ", block_typ);
var player_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
player_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.player_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["Standing"], ["Jumping"], ["Running"], ["Crouching"]]};
};
player_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
player_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.player_typ", player_typ);
var part_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
part_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.part_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["GoombaSquish"], ["BrickChunkL"], ["BrickChunkR"], ["Score100"], ["Score200"], ["Score400"], ["Score800"], ["Score1000"], ["Score2000"], ["Score4000"], ["Score8000"]]};
};
part_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
part_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.part_typ", part_typ);
var spawn_typ = function(a, b) {
  this.tag = a;
  this.data = b;
};
spawn_typ.prototype[_Symbol.reflection] = function() {
  return {type:"Actors.spawn_typ", interfaces:["FSharpUnion", "System.IEquatable", "System.IComparable"], cases:[["SPlayer", pl_typ, player_typ], ["SEnemy", enemy_typ], ["SItem", item_typ], ["SBlock", block_typ]]};
};
spawn_typ.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
spawn_typ.prototype.CompareTo = function(a) {
  return compareUnions(this, a) | 0;
};
setType("Actors.spawn_typ", spawn_typ);
function eq_checkloc(a, b, c, d) {
  return a === c ? b === d : !1;
}
function max_float(a, b) {
  return a > b ? a : b;
}
function min_float(a, b) {
  return a < b ? a : b;
}
var viewport = function(a, b, c) {
  this.pos = a;
  this.v_dim = b;
  this.m_dim = c;
};
viewport.prototype[_Symbol.reflection] = function() {
  return {type:"Viewport.viewport", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{pos:xy, v_dim:xy, m_dim:xy}};
};
viewport.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
viewport.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Viewport.viewport", viewport);
function make$1(a, b, c, d) {
  return new viewport(new xy(0, 0), new xy(a, b), new xy(c, d));
}
function calc_viewport_point(a, b, c) {
  var d = b / 2;
  return min_float(max_float(a - d, 0), min_float(c - b, Math.abs(a - d)));
}
function in_viewport(a, b) {
  var c = [a.pos.x - 32, a.pos.x + a.v_dim.x];
  a = [a.pos.y - 32, a.pos.y + a.v_dim.y];
  b = [b.x, b.y];
  return b[0] >= c[0] && b[0] <= c[1] && b[1] >= a[0] ? b[1] <= a[1] : !1;
}
function out_of_viewport_below(a, b) {
  return b >= a.pos.y + a.v_dim.y;
}
function coord_to_viewport(a, b) {
  return new xy(b.x - a.pos.x, b.y - a.pos.y);
}
function update(a, b) {
  var c = calc_viewport_point(b.x, a.v_dim.x, a.m_dim.x);
  b = calc_viewport_point(b.y, a.v_dim.y, a.m_dim.y);
  return new viewport(new xy(c, b), a.v_dim, a.m_dim);
}
function ofArray(a, b) {
  b = b || new List$1;
  for (var c = a.length - 1; 0 <= c; c--) {
    b = new List$1(a[c], b);
  }
  return b;
}
$jscomp.initSymbol();
$jscomp.initSymbolIterator();
var List$1 = function(a, b) {
  this.head = a;
  this.tail = b;
};
List$1.prototype.ToString = function() {
  return "[" + Array.from(this).map(function(a) {
    return toString(a);
  }).join("; ") + "]";
};
List$1.prototype.Equals = function(a) {
  if (this === a) {
    return !0;
  }
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  var b = this[Symbol.iterator]();
  for (a = a[Symbol.iterator]();;) {
    var c = b.next(), d = a.next();
    if (c.done) {
      return d.done ? !0 : !1;
    }
    if (d.done || !equals(c.value, d.value)) {
      return !1;
    }
  }
};
List$1.prototype.CompareTo = function(a) {
  if (this === a) {
    return 0;
  }
  var b = 0;
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  var c = this[Symbol.iterator]();
  for (a = a[Symbol.iterator]();;) {
    var d = c.next(), e = a.next();
    if (d.done) {
      return e.done ? b : -1;
    }
    if (e.done) {
      return 1;
    }
    b = compare(d.value, e.value);
    if (0 != b) {
      return b;
    }
  }
};
List$1.prototype[Symbol.iterator] = function() {
  var a = this;
  return {next:function() {
    var b = a;
    a = a.tail;
    return {done:null == b.tail, value:b.head};
  }};
};
List$1.prototype[_Symbol.reflection] = function() {
  return {type:"Microsoft.FSharp.Collections.FSharpList", interfaces:["System.IEquatable", "System.IComparable"]};
};
$jscomp.global.Object.defineProperties(List$1.prototype, {length:{configurable:!0, enumerable:!0, get:function() {
  for (var a = this, b = 0; null != a.tail;) {
    a = a.tail, b++;
  }
  return b;
}}});
function fold(a, b, c) {
  if (Array.isArray(c) || ArrayBuffer.isView(c)) {
    return c.reduce(a, b);
  }
  $jscomp.initSymbol();
  $jscomp.initSymbolIterator();
  for (var d = 0, e = c[Symbol.iterator]();; d++) {
    c = e.next();
    if (c.done) {
      break;
    }
    b = a(b, c.value, d);
  }
  return b;
}
function iterate(a, b) {
  fold(function(b, d) {
    return a(d);
  }, null, b);
}
function append$$1(a, b) {
  return fold(function(a, b) {
    return new List$1(b, a);
  }, b, reverse$$1(a));
}
function filter$$1(a, b) {
  return reverse$$1(fold(function(b, d) {
    return a(d) ? new List$1(d, b) : b;
  }, new List$1, b));
}
function reverse$$1(a) {
  return fold(function(a, c) {
    return new List$1(c, a);
  }, new List$1, a);
}
var part_params = function(a, b, c) {
  this.sprite = a;
  this.rot = b;
  this.lifetime = c | 0;
};
part_params.prototype[_Symbol.reflection] = function() {
  return {type:"Particle.part_params", interfaces:["FSharpRecord", "System.IEquatable"], properties:{sprite:sprite, rot:"number", lifetime:"number"}};
};
part_params.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
setType("Particle.part_params", part_params);
var particle = function(a, b, c, d, e, f, g) {
  this.param = a;
  this.part_type = b;
  this.pos = c;
  this.vel = d;
  this.acc = e;
  this.kill = f;
  this.life = g | 0;
};
particle.prototype[_Symbol.reflection] = function() {
  return {type:"Particle.particle", interfaces:["FSharpRecord", "System.IEquatable"], properties:{param:part_params, part_type:part_typ, pos:xy, vel:xy, acc:xy, kill:"boolean", life:"number"}};
};
particle.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
setType("Particle.particle", particle);
function pair_to_xy(a, b) {
  a = [a, b];
  return new xy(a[0], a[1]);
}
function make_params(a, b, c) {
  return new part_params(a, b, c);
}
function make_type$2(a, b) {
  return 1 === a.tag ? make_params(make_particle(a, b), 0, 300) : 2 === a.tag ? make_params(make_particle(a, b), 0, 300) : make_params(make_particle(a, b), 0, 30);
}
function make$3(a, b, c, d, e, f, g, h) {
  a = [a, b];
  c = [c, d];
  f = [f, g];
  h = make_type$2(e, h);
  return new particle(h, e, pair_to_xy(f[0], f[1]), pair_to_xy(a[0], a[1]), pair_to_xy(c[0], c[1]), !1, h.lifetime);
}
function make0(a, b, c, d) {
  b = [b, c];
  c = [0, 0];
  var e = [0, 0];
  return make$3(c[0], c[1], e[0], e[1], a, b[0], b[1], d);
}
function make_score(a, b, c, d) {
  b = [b, c];
  switch(a) {
    case 100:
      a = new part_typ(3);
      break;
    case 200:
      a = new part_typ(4);
      break;
    case 400:
      a = new part_typ(5);
      break;
    case 800:
      a = new part_typ(6);
      break;
    case 1000:
      a = new part_typ(7);
      break;
    case 2000:
      a = new part_typ(8);
      break;
    case 4000:
      a = new part_typ(9);
      break;
    case 8000:
      a = new part_typ(10);
      break;
    default:
      a = new part_typ(3);
  }
  c = [0.5, -0.7];
  var e = [0, 0];
  return make$3(c[0], c[1], e[0], e[1], a, b[0], b[1], d);
}
function update_vel$1(a) {
  a.vel.x += a.acc.x;
  a.vel.y += a.acc.y;
}
function update_pos$1(a) {
  a.pos.x = a.vel.x + a.pos.x;
  a.pos.y = a.vel.y + a.pos.y;
}
function proc(a) {
  a.life = a.life - 1 | 0;
  0 === a.life && (a.kill = !0);
  update_vel$1(a);
  update_pos$1(a);
}
var friction = 0.9, gravity = 0.2, max_y_vel = 4.5, player_speed = 2.8, player_jump = 5.7, player_max_jump = -6, dampen_jump = 4, invuln = 60, aabb = function(a, b) {
  this.center = a;
  this.half = b;
};
aabb.prototype[_Symbol.reflection] = function() {
  return {type:"Object.aabb", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{center:xy, half:xy}};
};
aabb.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
aabb.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Object.aabb", aabb);
var obj_params = function(a, b) {
  this.has_gravity = a;
  this.speed = b;
};
obj_params.prototype[_Symbol.reflection] = function() {
  return {type:"Object.obj_params", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{has_gravity:"boolean", speed:"number"}};
};
obj_params.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
obj_params.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Object.obj_params", obj_params);
var min_int = -100000, id_counter = {contents:min_int}, obj = function(a, b, c, d, e, f, g, h, m, k, p, n) {
  this.param = a;
  this.pos = b;
  this.vel = c;
  this.id = d | 0;
  this.jumping = e;
  this.grounded = f;
  this.dir = g;
  this.invuln = h | 0;
  this.kill = m;
  this.health = k | 0;
  this.crouch = p;
  this.score = n | 0;
};
obj.prototype[_Symbol.reflection] = function() {
  return {type:"Object.obj", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{param:obj_params, pos:xy, vel:xy, id:"number", jumping:"boolean", grounded:"boolean", dir:dir_1d, invuln:"number", kill:"boolean", health:"number", crouch:"boolean", score:"number"}};
};
obj.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
obj.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Object.obj", obj);
var collidable = function(a, b) {
  this.tag = a;
  this.data = b;
};
collidable.prototype[_Symbol.reflection] = function() {
  return {type:"Object.collidable", interfaces:["FSharpUnion", "System.IEquatable"], cases:[["Player", pl_typ, sprite, obj], ["Enemy", enemy_typ, sprite, obj], ["Item", item_typ, sprite, obj], ["Block", block_typ, sprite, obj]]};
};
collidable.prototype.Equals = function(a) {
  return this === a || this.tag === a.tag && equals(this.data, a.data);
};
setType("Object.collidable", collidable);
function setup_obj() {
  return new obj_params(!0, 1);
}
function setup_obj_spd(a) {
  return new obj_params(!0, a);
}
var setup_obj_g_false = new obj_params(!1, 1);
function set_vel_to_speed(a) {
  var b = a.param.speed;
  a.vel.x = 1 === a.dir.tag ? b : -b;
}
function make_player$1() {
  return setup_obj_spd(player_speed);
}
function make_item$1(a) {
  return 1 === a.tag ? setup_obj() : 2 === a.tag ? setup_obj() : 3 === a.tag ? setup_obj_g_false : setup_obj();
}
function make_enemy$1(a) {
  return 1 === a.tag ? setup_obj() : 2 === a.tag ? setup_obj() : 3 === a.tag ? setup_obj_spd(3) : 4 === a.tag ? setup_obj_spd(3) : setup_obj();
}
function make_block$1(a) {
  switch((1 === a.tag ? [1] : 2 === a.tag ? [1] : 3 === a.tag ? [1] : 4 === a.tag ? [1] : 5 === a.tag ? [1] : 6 === a.tag ? [1] : [0])[0]) {
    case 0:
      return setup_obj_g_false;
    case 1:
      return setup_obj_g_false;
  }
}
function make_type$1(a) {
  return 1 === a.tag ? make_enemy$1(a.data) : 2 === a.tag ? make_item$1(a.data) : 3 === a.tag ? make_block$1(a.data) : make_player$1();
}
function new_id() {
  id_counter.contents = id_counter.contents + 1 | 0;
  return id_counter.contents | 0;
}
function make$2(a, b, c, d, e, f) {
  d = make(c, b, d);
  c = make_type$1(c);
  a = (null != a ? a : new_id()) | 0;
  b = new obj(c, new xy(e, f), new xy(0, 0), a, !1, !1, b, 0, !1, 1, !1, 0);
  return [d, b];
}
function spawn(a, b, c, d) {
  b = make$2(null, new dir_1d(0), a, b, c, d);
  return 1 === a.tag ? (set_vel_to_speed(b[1]), new collidable(1, [a.data, b[0], b[1]])) : 2 === a.tag ? new collidable(2, [a.data, b[0], b[1]]) : 3 === a.tag ? new collidable(3, [a.data, b[0], b[1]]) : new collidable(0, [a.data[0], b[0], b[1]]);
}
function get_sprite(a) {
  a = [0, a.data[1]];
  switch(a[0]) {
    case 0:
      return a[1];
  }
}
function get_obj(a) {
  a = [0, a.data[2]];
  switch(a[0]) {
    case 0:
      return a[1];
  }
}
function is_player(a) {
  return 0 === a.tag ? !0 : !1;
}
function is_enemy(a) {
  return 1 === a.tag ? !0 : !1;
}
function equals$1(a, b) {
  return get_obj(a).id === get_obj(b).id;
}
function update_player_keys(a, b) {
  var c = 0.2 * a.vel.x;
  if (1 === b.tag) {
    a.crouch || (a.vel.x < a.param.speed && (a.vel.x += 0.4 + c), a.dir = new dir_1d(1));
  } else {
    if (2 === b.tag) {
      if (a.jumping ? 0 : a.grounded) {
        a.jumping = !0, a.grounded = !1, a.vel.y = max_float(a.vel.y - (player_jump + 0.25 * Math.abs(a.vel.x)), player_max_jump);
      }
    } else {
      if (3 === b.tag) {
        if (a.jumping ? 0 : a.grounded) {
          a.crouch = !0;
        }
      } else {
        a.crouch || (a.vel.x > -a.param.speed && (a.vel.x -= 0.4 - c), a.dir = new dir_1d(0));
      }
    }
  }
}
function normalize_pos(a, b, c) {
  a.x = a.x - (c.bbox_size[0] + c.bbox_offset[0]) + (b.bbox_size[0] + b.bbox_offset[0]);
  a.y = a.y - (c.bbox_size[1] + c.bbox_offset[1]) + (b.bbox_size[1] + b.bbox_offset[1]);
}
function update_player(a, b, c) {
  var d = a.jumping, e = a.dir, f = Math.abs(a.vel.x);
  iterate(function(b) {
    update_player_keys(a, b);
  }, b);
  b = a.vel.x * friction;
  a.vel.x = 0.1 > Math.abs(b) ? 0 : b;
  b = 1 >= a.health ? new pl_typ(1) : new pl_typ(0);
  return (d ? 0 : a.jumping) ? [b, make(new spawn_typ(0, [b, new player_typ(1)]), a.dir, c)] : (eq_dir_1d(e, a.dir) ? 0 === f && 0 < Math.abs(a.vel.x) && !a.jumping : 1) ? [b, make(new spawn_typ(0, [b, new player_typ(2)]), a.dir, c)] : (eq_dir_1d(e, a.dir) ? 0 : a.jumping) && d ? [b, make(new spawn_typ(0, [b, new player_typ(1)]), a.dir, c)] : 0 === a.vel.y && a.crouch ? [b, make(new spawn_typ(0, [b, new player_typ(3)]), a.dir, c)] : 0 === a.vel.y && 0 === a.vel.x ? [b, make(new spawn_typ(0, [b, new player_typ(0)]), 
  a.dir, c)] : null;
}
function update_vel$$1(a) {
  a.grounded ? a.vel.y = 0 : a.param.has_gravity && (a.vel.y = a.vel.y + gravity + 0.01 * Math.abs(a.vel.y) < max_y_vel ? a.vel.y + gravity + 0.01 * Math.abs(a.vel.y) : max_y_vel);
}
function update_pos$$1(a) {
  a.pos.x = a.vel.x + a.pos.x;
  a.param.has_gravity && (a.pos.y = a.vel.y + a.pos.y);
}
function process_obj(a, b) {
  update_vel$$1(a);
  update_pos$$1(a);
  a.pos.y > b && (a.kill = !0);
}
function collide_block(a, b, c) {
  switch((1 === b.tag ? [1] : 2 === b.tag ? [2] : 3 === b.tag ? [2] : [0])[0]) {
    case 0:
      c.vel.y = -0.001;
      break;
    case 1:
      c.vel.y = 0;
      c.grounded = !0;
      c.jumping = !1;
      break;
    case 2:
      a && (c.vel.x = 0);
  }
}
function collide_block2(a, b) {
  collide_block(!1, a, b);
}
function opposite_dir(a) {
  return 1 === a.tag ? new dir_1d(0) : new dir_1d(1);
}
function reverse_left_right(a) {
  a.vel.x = -a.vel.x;
  a.dir = opposite_dir(a.dir);
}
function evolve_enemy(a, b, c, d, e) {
  switch((1 === b.tag ? [0] : 2 === b.tag ? [1] : 3 === b.tag ? [2] : 4 === b.tag ? [2] : [3])[0]) {
    case 0:
      return a = make$2(null, d.dir, new spawn_typ(1, new enemy_typ(3)), e, d.pos.x, d.pos.y), normalize_pos(a[1].pos, c.param, a[0].param), new collidable(1, [new enemy_typ(3), a[0], a[1]]);
    case 1:
      return a = make$2(null, d.dir, new spawn_typ(1, new enemy_typ(4)), e, d.pos.x, d.pos.y), normalize_pos(a[1].pos, c.param, a[0].param), new collidable(1, [new enemy_typ(4), a[0], a[1]]);
    case 2:
      return d.dir = a, 0 !== d.vel.x ? d.vel.x = 0 : set_vel_to_speed(d), null;
    case 3:
      return d.kill = !0, null;
  }
}
function rev_dir(a, b, c) {
  reverse_left_right(a);
  var d = c.param;
  transform_enemy(b, c, a.dir);
  normalize_pos(a.pos, d, c.param);
}
function dec_health(a) {
  var b = a.health - 1 | 0;
  0 === b ? a.kill = !0 : 0 === a.invuln && (a.health = b | 0);
}
function evolve_block(a, b) {
  dec_health(a);
  a = make$2(null, new dir_1d(0), new spawn_typ(3, new block_typ(1)), b, a.pos.x, a.pos.y);
  return new collidable(3, [new block_typ(1), a[0], a[1]]);
}
function spawn_above(a, b, c, d) {
  b = spawn(new spawn_typ(2, c), d, b.pos.x, b.pos.y);
  c = get_obj(b);
  c.pos.y -= get_sprite(b).param.frame_size[1];
  c.dir = opposite_dir(a);
  set_vel_to_speed(c);
  return b;
}
function get_aabb(a) {
  var b = get_sprite(a).param;
  a = get_obj(a);
  a = [a.pos.x + b.bbox_offset[0], a.pos.y + b.bbox_offset[1]];
  return new aabb(new xy(a[0] + b.bbox_size[0] / 2, a[1] + b.bbox_size[1] / 2), new xy(b.bbox_size[0] / 2, b.bbox_size[1] / 2));
}
function col_bypass(a, b) {
  var c = get_obj(a), d = get_obj(b);
  a = [a, b];
  a = 2 === a[0].tag ? 1 === a[1].tag ? [0] : 2 === a[1].tag ? [0] : [2] : 1 === a[0].tag ? 2 === a[1].tag ? [0] : [2] : 0 === a[0].tag ? 1 === a[1].tag ? [1, a[0].data[2]] : [2] : [2];
  switch(a[0]) {
    case 0:
      var e = !0;
      break;
    case 1:
      e = 0 < a[1].invuln ? !0 : !1;
      break;
    case 2:
      e = !1;
  }
  return c.kill || d.kill ? !0 : e;
}
function check_collision(a, b) {
  var c = get_aabb(a), d = get_aabb(b), e = get_obj(a);
  if (col_bypass(a, b)) {
    return null;
  }
  a = c.center.x - d.center.x;
  b = c.center.y - d.center.y;
  var f = c.half.x + d.half.x, c = c.half.y + d.half.y;
  if (Math.abs(a) < f && Math.abs(b) < c) {
    d = f - Math.abs(a);
    c -= Math.abs(b);
    if (d >= c) {
      if (0 < b) {
        return e.pos.y += c, new dir_2d(0);
      }
      e.pos.y -= c;
      return new dir_2d(1);
    }
    if (0 < a) {
      return e.pos.x += d, new dir_2d(3);
    }
    e.pos.x -= d;
    return new dir_2d(2);
  }
  return null;
}
function kill(a, b) {
  if (1 === a.tag) {
    var c = [a.data[2].pos.x, a.data[2].pos.y], d = 0 < a.data[2].score ? ofArray([make_score(a.data[2].score | 0, c[0], c[1], b)]) : new List$1;
    0 === a.data[0].tag ? (a = new part_typ(0), b = make0(a, c[0], c[1], b), b = ofArray([b])) : b = new List$1;
    return append$$1(d, b);
  }
  if (3 === a.tag) {
    if (2 === a.data[0].tag) {
      d = [a.data[2].pos.x, a.data[2].pos.y];
      c = [-5, -5];
      a = [0, 0.2];
      var e = new part_typ(1), c = make$3(c[0], c[1], a[0], a[1], e, d[0], d[1], b);
      a = [-3, -4];
      var e = [0, 0.2], f = new part_typ(1);
      a = make$3(a[0], a[1], e[0], e[1], f, d[0], d[1], b);
      var e = [3, -4], f = [0, 0.2], g = new part_typ(2), e = make$3(e[0], e[1], f[0], f[1], g, d[0], d[1], b), f = [5, -5], g = [0, 0.2], h = new part_typ(2);
      b = make$3(f[0], f[1], g[0], g[1], h, d[0], d[1], b);
      return ofArray([c, a, e, b]);
    }
    return new List$1;
  }
  return 2 === a.tag ? 0 === a.data[0].tag ? ofArray([make_score(a.data[2].score, a.data[2].pos.x, a.data[2].pos.y, b)]) : new List$1 : new List$1;
}
var context$1 = canvas.getContext("2d");
function render_bbox(a, b, c) {
  var d = a.param.bbox_offset, e = a.param.bbox_size;
  a.context.strokeStyle = "#FF0000";
  a.context.strokeRect(b + d[0], c + d[1], e[0], e[1]);
}
function render(a, b, c) {
  var d = a.param.src_offset, e = a.param.frame_size;
  b = [b, c];
  c = a.param.frame_size;
  a.context.drawImage(a.img, d[0] + a.frame.contents * e[0], d[1], e[0], e[1], b[0], b[1], c[0], c[1]);
}
function draw_bgd(a, b) {
  render(a, -b, 0);
  render(a, a.param.frame_size[0] - b, 0);
}
function clear_canvas(a) {
  a.getContext("2d").clearRect(0, 0, a.width, a.height);
}
function hud(a, b, c) {
  b = "" + b;
  c = "" + c;
  var d = a.getContext("2d");
  d.font = "10px 'Press Start 2P'";
  d.fillText("Score: " + b, a.width - 140, 18);
  d.fillText("Coins: " + c, 120, 18);
}
function fps(a, b) {
  context$1.fillText("" + b, 10, 18);
}
function game_win(a) {
  a.rect(0, 0, 512, 512);
  a.fillStyle = "black";
  a.fill();
  a.fillStyle = "white";
  a.font = "20px 'Press Start 2P'";
  a.fillText("You win!", 180, 128);
  throw Error("Game over.");
}
function game_loss(a) {
  a.rect(0, 0, 512, 512);
  a.fillStyle = "black";
  a.fill();
  a.fillStyle = "white";
  a.font = "20px 'Press Start 2P'";
  a.fillText("GAME OVER. You lose!", 60, 128);
  throw Error("Game over.");
}
var keys = function(a, b, c, d, e) {
  this.left = a;
  this.right = b;
  this.up = c;
  this.down = d;
  this.bbox = e | 0;
};
keys.prototype[_Symbol.reflection] = function() {
  return {type:"Director.keys", interfaces:["FSharpRecord", "System.IEquatable", "System.IComparable"], properties:{left:"boolean", right:"boolean", up:"boolean", down:"boolean", bbox:"number"}};
};
keys.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
keys.prototype.CompareTo = function(a) {
  return compareRecords(this, a) | 0;
};
setType("Director.keys", keys);
var st = function(a, b, c, d, e, f, g, h) {
  this.bgd = a;
  this.ctx = b;
  this.vpt = c;
  this.map = d;
  this.score = e | 0;
  this.coins = f | 0;
  this.multiplier = g | 0;
  this.game_over = h;
};
st.prototype[_Symbol.reflection] = function() {
  return {type:"Director.st", interfaces:["FSharpRecord", "System.IEquatable"], properties:{bgd:sprite, ctx:Interface("Fable.Import.Browser.CanvasRenderingContext2D"), vpt:viewport, map:"number", score:"number", coins:"number", multiplier:"number", game_over:"boolean"}};
};
st.prototype.Equals = function(a) {
  return equalsRecords(this, a);
};
setType("Director.st", st);
var pressed_keys = new keys(!1, !1, !1, !1, 0), collid_objs = {contents:new List$1}, particles = {contents:new List$1}, last_time = {contents:0};
function calc_fps(a, b) {
  return 1 / ((b - a) / 1000);
}
function update_score(a, b) {
  a.score = a.score + b | 0;
}
function player_attack_enemy(a, b, c, d, e, f, g) {
  b.invuln = 10;
  b.jumping = !1;
  b.grounded = !0;
  switch((3 === c.tag ? [0] : 4 === c.tag ? [0] : [1])[0]) {
    case 0:
      return c = evolve_enemy(b.dir, c, d, e, g), b.vel.y = -dampen_jump, b.pos.y -= 5, [null, c];
    case 1:
      return dec_health(e), b.vel.y = -dampen_jump, 8 === f.multiplier ? (update_score(f, 800), e.score = 800) : (a = 100 * f.multiplier | 0, update_score(f, a), e.score = a | 0, f.multiplier = 2 * f.multiplier | 0), [null, evolve_enemy(b.dir, c, d, e, g)];
  }
}
function enemy_attack_player(a, b, c, d, e, f) {
  switch((3 === c.tag ? [0] : 4 === c.tag ? [0] : [1])[0]) {
    case 0:
      return 0 === e.vel.x ? a = evolve_enemy(b.dir, c, d, e, f) : (dec_health(b), b.invuln = invuln | 0, a = null), [null, a];
    case 1:
      return dec_health(b), b.invuln = invuln | 0, [null, null];
  }
}
function col_enemy_enemy(a, b, c, d, e, f, g) {
  var h = [a, d];
  switch((3 === h[0].tag ? 3 === h[1].tag ? [0] : 4 === h[1].tag ? [0] : [1] : 4 === h[0].tag ? 4 === h[1].tag ? [0] : 3 === h[1].tag ? [0] : [1] : 4 === h[1].tag ? [2] : 3 === h[1].tag ? [2] : [3])[0]) {
    case 0:
      return dec_health(c), dec_health(f), [null, null];
    case 1:
      return 0 === c.vel.x ? rev_dir(f, d, e) : dec_health(f), [null, null];
    case 2:
      return 0 === f.vel.x ? rev_dir(c, a, b) : dec_health(c), [null, null];
    case 3:
      switch((3 === g.tag ? [0] : 2 === g.tag ? [0] : [1])[0]) {
        case 0:
          return rev_dir(c, a, b), rev_dir(f, d, e), [null, null];
        case 1:
          return [null, null];
      }
  }
}
function process_collision(a, b, c, d) {
  b = [b, c, a];
  b = 0 === b[0].tag ? 1 === b[1].tag ? 1 === b[2].tag ? [0, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : [1, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : 2 === b[1].tag ? [2, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : 3 === b[1].tag ? 0 === b[2].tag ? [7, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0], b[0].data[0]] : [8, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : 
  [9] : 1 === b[0].tag ? 0 === b[1].tag ? 0 === b[2].tag ? [0, b[1].data[2], b[0].data[2], b[1].data[1], b[0].data[1], b[0].data[0]] : [1, b[1].data[2], b[0].data[2], b[1].data[1], b[0].data[1], b[0].data[0]] : 1 === b[1].tag ? [3, b[2], b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[0].data[0], b[1].data[0]] : 3 === b[1].tag ? 2 === b[2].tag ? [4, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[0].data[0], b[1].data[0]] : 3 === b[2].tag ? [4, b[0].data[2], b[1].data[2], b[0].data[1], 
  b[1].data[1], b[0].data[0], b[1].data[0]] : [6, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : [9] : 2 === b[0].tag ? 0 === b[1].tag ? [2, b[1].data[2], b[0].data[2], b[1].data[1], b[0].data[1], b[0].data[0]] : 3 === b[1].tag ? 2 === b[2].tag ? [5, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : 3 === b[2].tag ? [5, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], b[1].data[0]] : [6, b[0].data[2], b[1].data[2], b[0].data[1], b[1].data[1], 
  b[1].data[0]] : [9] : [9];
  switch(b[0]) {
    case 0:
      return player_attack_enemy(b[3], b[1], b[5], b[4], b[2], d, d.ctx);
    case 1:
      return enemy_attack_player(b[3], b[1], b[5], b[4], b[2], d.ctx);
    case 2:
      return 0 === b[5].tag ? (dec_health(b[2]), 2 !== b[1].health && (b[1].health = b[1].health + 1 | 0), b[1].vel.x = 0, b[1].vel.y = 0, update_score(d, 1000), b[2].score = 1000) : 3 === b[5].tag ? (d.coins = d.coins + 1 | 0, dec_health(b[2]), update_score(d, 100)) : (dec_health(b[2]), update_score(d, 1000)), [null, null];
    case 3:
      return col_enemy_enemy(b[6], b[4], b[2], b[7], b[5], b[3], b[1]);
    case 4:
      switch(a = [b[5], b[6]], c = 4 === a[0].tag ? 2 === a[1].tag ? [0] : 0 === a[1].tag ? [1, a[1].data] : [2] : 3 === a[0].tag ? 2 === a[1].tag ? [0] : 0 === a[1].tag ? [1, a[1].data] : [2] : [2], c[0]) {
        case 0:
          return dec_health(b[2]), reverse_left_right(b[1]), [null, null];
        case 1:
          return a = evolve_block(b[2], d.ctx), d = spawn_above(b[1].dir, b[2], c[1], d.ctx), rev_dir(b[1], b[5], b[3]), [a, d];
        case 2:
          return rev_dir(b[1], b[5], b[3]), [null, null];
      }case 5:
      return reverse_left_right(b[1]), [null, null];
    case 6:
      return collide_block2(a, b[1]), [null, null];
    case 7:
      if (0 === b[5].tag) {
        return c = evolve_block(b[2], d.ctx), d = spawn_above(b[1].dir, b[2], b[5].data, d.ctx), collide_block2(a, b[1]), [d, c];
      }
      2 === b[5].tag ? b[6].Equals(new pl_typ(0)) ? (collide_block2(a, b[1]), dec_health(b[2])) : collide_block2(a, b[1]) : 5 === b[5].tag ? game_win(d.ctx) : collide_block2(a, b[1]);
      return [null, null];
    case 8:
      return 5 === b[5].tag ? game_win(d.ctx) : (1 === a.tag && (d.multiplier = 1), collide_block2(a, b[1])), [null, null];
    case 9:
      return [null, null];
  }
}
function broad_phase(a, b, c) {
  var d = get_obj(a);
  return filter$$1(function(b) {
    return in_viewport(c.vpt, d.pos) || is_player(a) ? !0 : out_of_viewport_below(c.vpt, d.pos.y);
  }, b);
}
function narrow_phase(a, b, c) {
  a: {
    var d = new List$1;
    for (;;) {
      if (null != b.tail) {
        var e = get_obj(a);
        if (equals$1(a, b.head)) {
          e = [null, null];
        } else {
          var f = check_collision(a, b.head), e = null != f ? get_obj(b.head).id !== e.id ? process_collision(f, a, b.head, c) : [null, null] : [null, null];
        }
        d = null != e[0] ? null != e[1] ? ofArray([e[0], e[1]], d) : new List$1(e[0], d) : null == e[1] ? d : new List$1(e[1], d);
        b = b.tail;
      } else {
        break a;
      }
    }
  }
  return d;
}
function check_collisions(a, b, c) {
  if (3 === a.tag) {
    return new List$1;
  }
  b = broad_phase(a, b, c);
  return narrow_phase(a, b, c);
}
function check_bbox_enabled() {
  return 1 === pressed_keys.bbox;
}
function update_collidable(a, b, c) {
  var d = get_obj(b), e = get_sprite(b);
  d.invuln = 0 < d.invuln ? d.invuln - 1 | 0 : 0;
  var f = in_viewport(a.vpt, d.pos) || is_player(b) ? !0 : out_of_viewport_below(a.vpt, d.pos.y);
  return (d.kill ? 0 : f) ? (d.grounded = !1, process_obj(d, a.map), c = check_collisions(b, c, a), a = coord_to_viewport(a.vpt, d.pos), render(e, a.x, a.y), check_bbox_enabled() && render_bbox(e, a.x, a.y), 0 === d.vel.x && is_enemy(b) || update_animation(e), c) : new List$1;
}
function translate_keys() {
  var a = pressed_keys, a = ofArray([[a.left, new controls(0)], [a.right, new controls(1)], [a.up, new controls(2)], [a.down, new controls(3)]]);
  return fold(function(a, c) {
    return c[0] ? new List$1(c[1], a) : a;
  }, new List$1, a);
}
function run_update_collid(a, b, c) {
  if (0 === b.tag) {
    var d = translate_keys();
    b.data[2].crouch = !1;
    var e = update_player(b.data[2], d, a.ctx);
    null != e && (d = e[0], e = e[1], normalize_pos(b.data[2].pos, b.data[1].param, e.param), b = new collidable(0, [d, e, b.data[2]]));
    a = update_collidable(a, b, c);
    collid_objs.contents = append$$1(collid_objs.contents, a);
    return b;
  }
  d = get_obj(b);
  c = update_collidable(a, b, c);
  d.kill || (collid_objs.contents = new List$1(b, append$$1(collid_objs.contents, c)));
  a = d.kill ? kill(b, a.ctx) : new List$1;
  particles.contents = append$$1(particles.contents, a);
  return b;
}
function run_update_particle(a, b) {
  proc(b);
  render(b.param.sprite, b.pos.x - a.vpt.pos.x, b.pos.y - a.vpt.pos.y);
  b.kill || (particles.contents = new List$1(b, particles.contents));
}
function update_loop(a, b, c, d, e) {
  e = [d, e];
  d = a.getContext("2d");
  var f = [a.width / 1, a.height / 1];
  var g = make$1(f[0], f[1], e[0], e[1]);
  f = make_bgd(d);
  g = update(g, get_obj(b).pos);
  e = new st(f, d, g, e[1], 0, 0, 1, !1);
  d.scale(1, 1);
  var h = function(b, c, d, e, f) {
    if (!0 === c.game_over) {
      return game_win(c.ctx);
    }
    collid_objs.contents = new List$1;
    particles.contents = new List$1;
    var g = calc_fps(last_time.contents, b);
    last_time.contents = b;
    clear_canvas(a);
    draw_bgd(c.bgd, c.vpt.pos.x / 5 % c.bgd.param.frame_size[0]);
    var k = run_update_collid(c, d, e);
    if (get_obj(k).kill) {
      return game_loss(c.ctx);
    }
    b = update(c.vpt, get_obj(k).pos);
    var l = new st(c.bgd, c.ctx, b, c.map, c.score, c.coins, c.multiplier, c.game_over);
    iterate(function(a) {
      run_update_collid(l, a, e);
    }, e);
    iterate(function(a) {
      run_update_particle(l, a);
    }, f);
    fps(a, ~~g);
    hud(a, l.score, l.coins);
    return window.requestAnimationFrame(function(a) {
      h(a, l, k, collid_objs.contents, particles.contents);
    });
  };
  return h(0, e, b, c, new List$1);
}
function keydown(a) {
  switch(~~a.keyCode | 0) {
    case 32:
    case 38:
    case 87:
      pressed_keys.up = !0;
      break;
    case 39:
    case 68:
      pressed_keys.right = !0;
      break;
    case 37:
    case 65:
      pressed_keys.left = !0;
      break;
    case 40:
    case 83:
      pressed_keys.down = !0;
      break;
    case 66:
      pressed_keys.bbox = (pressed_keys.bbox + 1) % 2 | 0;
  }
  return null;
}
function keyup(a) {
  switch(~~a.keyCode | 0) {
    case 32:
    case 38:
    case 87:
      pressed_keys.up = !1;
      break;
    case 39:
    case 68:
      pressed_keys.right = !1;
      break;
    case 37:
    case 65:
      pressed_keys.left = !1;
      break;
    case 40:
    case 83:
      pressed_keys.down = !1;
  }
  return null;
}
function random_int(a, b) {
  return a + ~~(Math.random() * (b - a)) | 0;
}
function mem_loc(a, b, c) {
  var d = {};
  for (;;) {
    if (d.checkloc = [a, b], null != c.tail) {
      if (function(a) {
        return function() {
          var b = c.head[1];
          return eq_checkloc(a.checkloc[0], a.checkloc[1], b[0], b[1]);
        };
      }(d)()) {
        return !0;
      }
      a = d.checkloc[0];
      b = d.checkloc[1];
      c = c.tail;
    } else {
      return !1;
    }
  }
}
function convert_list(a) {
  return null != a.tail ? append$$1(ofArray([[a.head[0], [16 * a.head[1][0], 16 * a.head[1][1]]]]), convert_list(a.tail)) : new List$1;
}
function choose_enemy_typ(a) {
  switch(a) {
    case 0:
      return new enemy_typ(2);
    case 1:
      return new enemy_typ(1);
    case 2:
      return new enemy_typ(0);
    default:
      throw Error("Shouldn't reach here");
  }
}
function choose_sblock_typ(a) {
  switch(a) {
    case 0:
      return new block_typ(2);
    case 1:
      return new block_typ(3);
    case 2:
      return new block_typ(4);
    case 3:
      return new block_typ(0, new item_typ(0));
    case 4:
      return new block_typ(6);
    default:
      throw Error("Shouldn't reach here");
  }
}
function avoid_overlap(a, b) {
  for (;;) {
    if (null != a.tail) {
      var c = a.head[1];
      if (mem_loc(c[0], c[1], b)) {
        a = a.tail;
      } else {
        return append$$1(ofArray([a.head]), avoid_overlap(a.tail, b));
      }
    } else {
      return new List$1;
    }
  }
}
function trim_edges(a, b, c) {
  for (;;) {
    if (null != a.tail) {
      var d = a.head[1][0], e = a.head[1][1], f = 16 * b, g = 16 * c;
      if (128 > d || 528 > f - d || 0 === e || 48 > g - e) {
        a = a.tail;
      } else {
        return append$$1(ofArray([a.head]), trim_edges(a.tail, b, c));
      }
    } else {
      return new List$1;
    }
  }
}
function generate_ground_stairs(a, b, c) {
  var d = ofArray([[c, [a, b]], [c, [a + 1, b]], [c, [a + 2, b]], [c, [a + 3, b]]]), e = ofArray([[c, [a + 1, b - 1]], [c, [a + 2, b - 1]], [c, [a + 3, b - 1]]]), f = ofArray([[c, [a + 2, b - 2]], [c, [a + 3, b - 2]]]);
  a = ofArray([[c, [a + 3, b - 3]]]);
  return append$$1(d, append$$1(e, append$$1(f, a)));
}
function generate_airup_stairs(a, b, c) {
  var d = ofArray([[c, [a, b]], [c, [a + 1, b]]]), e = ofArray([[c, [a + 3, b - 1]], [c, [a + 4, b - 1]]]);
  a = ofArray([[c, [a + 4, b - 2]], [c, [a + 5, b - 2]], [c, [a + 6, b - 2]]]);
  return append$$1(d, append$$1(e, a));
}
function generate_airdown_stairs(a, b, c) {
  var d = ofArray([[c, [a, b]], [c, [a + 1, b]], [c, [a + 2, b]]]), e = ofArray([[c, [a + 2, b + 1]], [c, [a + 3, b + 1]]]);
  a = ofArray([[c, [a + 5, b + 2]], [c, [a + 6, b + 2]]]);
  return append$$1(d, append$$1(e, a));
}
function generate_clouds(a, b, c, d) {
  return 0 === d ? new List$1 : append$$1(ofArray([[c, [a, b]]]), generate_clouds(a + 1, b, c, d - 1));
}
function generate_coins(a) {
  for (;;) {
    var b = random_int(0, 2) | 0;
    if (null != a.tail) {
      if (0 === b) {
        return append$$1(ofArray([[0, [a.head[1][0], a.head[1][1] - 16]]]), generate_coins(a.tail));
      }
      a = a.tail;
    } else {
      return new List$1;
    }
  }
}
function choose_block_pattern(a, b, c, d, e) {
  if (c > a || d > b) {
    return new List$1;
  }
  var f = random_int(0, 4) | 0, g = random_int(0, 2) | 0, h = (0 === (random_int(0, 5) | 0) ? 3 : g) | 0;
  switch(e) {
    case 0:
      return 2 < a - c ? ofArray([[g, [c, d]], [h, [c + 1, d]], [g, [c + 2, d]]]) : 1 < a - c ? ofArray([[f, [c, d]], [f, [c + 1, d]]]) : ofArray([[f, [c, d]]]);
    case 1:
      return a = random_int(0, 5) + 5 | 0, 5 > d ? generate_clouds(c, d, 2, a) : new List$1;
    case 2:
      return 1 === b - d ? generate_ground_stairs(c, d, g) : new List$1;
    case 3:
      return 0 === g && 3 < b - d ? generate_airdown_stairs(c, d, g) : 2 < b - d ? generate_airup_stairs(c, d, g) : ofArray([[g, [c, d]]]);
    case 4:
      return 2 === d + 3 - b ? ofArray([[g, [c, d]]]) : 1 === d + 3 - b ? ofArray([[g, [c, d]], [g, [c, d + 1]]]) : ofArray([[g, [c, d]], [g, [c, d + 1]], [g, [c, d + 2]]]);
    case 5:
      return ofArray([[3, [c, d]]]);
    default:
      throw Error("Shouldn't reach here");
  }
}
function generate_enemies(a, b, c, d, e) {
  for (;;) {
    if (c > a - 32) {
      return new List$1;
    }
    if (d > b - 1 || 15 > c) {
      c += 1, d = 0;
    } else {
      if (!mem_loc(c, d, e) && 0 !== d) {
        var f = random_int(0, 30) | 0;
        if (3 > f && b - 1 === d) {
          return f = ofArray([[f, [16 * c, 16 * d]]]), append$$1(f, generate_enemies(a, b, c, d + 1, e));
        }
      }
      d += 1;
    }
  }
}
function generate_block_enemies(a) {
  for (;;) {
    var b = random_int(0, 20) | 0, c = random_int(0, 3) | 0;
    if (null != a.tail) {
      if (0 === b) {
        return append$$1(ofArray([[c, [a.head[1][0], a.head[1][1] - 16]]]), generate_block_enemies(a.tail));
      }
      a = a.tail;
    } else {
      return new List$1;
    }
  }
}
function generate_block_locs(a, b, c, d, e) {
  for (;;) {
    if (33 > a - c) {
      return e;
    }
    if (d > b - 1) {
      c += 1, d = 0;
    } else {
      if (!mem_loc(c, d, e) && 0 !== d) {
        var f = random_int(0, 100) | 0;
        5 > f && (f = choose_block_pattern(a, b, c, d, f), f = avoid_overlap(f, e), e = append$$1(e, f));
      }
      d += 1;
    }
  }
}
function generate_panel(a, b, c) {
  return spawn(new spawn_typ(3, new block_typ(5)), a, 16 * b - 256, 32 * c / 3);
}
function generate_ground(a, b, c, d) {
  for (;;) {
    if (c > a) {
      return d;
    }
    if (10 < c) {
      var e = random_int(0, 10) | 0, f = append$$1(d, ofArray([[4, [16 * c, 16 * b]]]));
      7 === e && 32 < a - c ? c += 1 : (c += 1, d = f);
    } else {
      d = append$$1(d, ofArray([[4, [16 * c, 16 * b]]])), c += 1;
    }
  }
}
function convert_to_block_obj(a, b) {
  if (null != a.tail) {
    var c = choose_sblock_typ(a.head[0]), c = new spawn_typ(3, c), d = a.head[1], c = spawn(c, b, d[0], d[1]);
    return append$$1(ofArray([c]), convert_to_block_obj(a.tail, b));
  }
  return new List$1;
}
function convert_to_enemy_obj(a, b) {
  if (null != a.tail) {
    var c = choose_enemy_typ(a.head[0]), c = new spawn_typ(1, c), d = a.head[1], c = spawn(c, b, d[0], d[1]);
    return append$$1(ofArray([c]), convert_to_enemy_obj(a.tail, b));
  }
  return new List$1;
}
function convert_to_coin_obj(a, b) {
  if (null != a.tail) {
    var c = new item_typ(3), c = new spawn_typ(2, c), d = a.head[1], c = spawn(c, b, d[0], d[1]);
    return append$$1(ofArray([c]), convert_to_coin_obj(a.tail, b));
  }
  return new List$1;
}
function generate_helper(a, b, c, d, e) {
  var f = generate_block_locs(a, b, 0, 0, new List$1);
  d = trim_edges(convert_list(f), a, b);
  c = convert_to_block_obj(d, e);
  var g = generate_ground(a, b, 0, new List$1), h = convert_to_block_obj(g, e), f = append$$1(f, g);
  c = append$$1(c, h);
  h = generate_enemies(a, b, 0, 0, f);
  h = convert_to_enemy_obj(h, e);
  g = generate_coins(d);
  f = trim_edges(avoid_overlap(g, d), a, b);
  g = append$$1(d, g);
  d = generate_block_enemies(d);
  d = avoid_overlap(d, g);
  d = convert_to_enemy_obj(d, e);
  f = convert_to_coin_obj(f, e);
  a = generate_panel(e, a, b);
  return append$$1(c, append$$1(h, append$$1(f, append$$1(d, ofArray([a])))));
}
function generate(a, b, c) {
  a = generate_helper(a / 16, b / 16 - 1, 0, 0, c);
  return [spawn(new spawn_typ(0, [new pl_typ(1), new player_typ(0)]), c, 100, 224), a];
}
function init() {
}
function load(a) {
  a = document.getElementById("canvas");
  var b = a.getContext("2d");
  document.addEventListener("keydown", function(a) {
    return keydown(a);
  });
  document.addEventListener("keyup", function(a) {
    return keyup(a);
  });
  init();
  var b = generate(2400, 256, b), c = [2400, 256];
  update_loop(a, b[0], b[1], c[0], c[1]);
}
function preload(a) {
  var b = 0;
  iterate(function(a) {
    a = "sprites/" + a;
    var c = document.createElement("img");
    c.src = a;
    c.addEventListener("load", function(a) {
      b = b + 1 | 0;
      4 === b && load();
      return null;
    });
  }, ofArray(["blocks.png", "items.png", "enemies.png", "mario-small.png"]));
}
window.addEventListener("load", function(a) {
  preload();
  return null;
});

